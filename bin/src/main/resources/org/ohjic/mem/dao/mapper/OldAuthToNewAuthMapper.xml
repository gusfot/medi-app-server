<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ohjic.mem.dao.OldAuthToNewAuthMapper">

  <select id="selectAuthTypeList" parameterType="map" resultType="map">
	select * from ${church}.auth_type
  </select>
  
  <insert id="insertPrivateAuthCategory" parameterType="map" >
	insert into ${church}.auth_category(name, auth_category_kind, priority)
	select '개인권한' name, 2 auth_category_kind, 0 priority
  </insert>
  
  <insert id="insertAuthDefaultByAuthCategory" parameterType="map">
  	insert into ${church}.auth_default(auth_category_idx, auth_type_idx, value) values (#{authCategoryIdx},#{authTypeIdx},#{value})
  </insert>
  
  <select id="selectManagerList" parameterType="map" resultType="map">
  select * from ${church}.manager
  </select>
  
  <select id="selectAuthCategoryList" parameterType="map" resultType="map">
  select * from ${church}.auth_category 
  <where>
  	auth_category_kind=#{authCategoryKind}
  </where>
  order by auth_category_idx asc
  </select>
  
  <select id="selectAuthManagerList" parameterType="map" resultType="map">
  select * from ${church}.auth_manager
  <where>
  	auth_category_idx = #{authCategoryIdx}
  </where>
  order by manager_idx asc
  </select>
  
  <update id="updateAuthManager" parameterType="map">
  update ${church}.auth_manager
  set auth_category_idx=#{authCategoryIdx}
  where manager_idx = #{managerIdx}
  </update>
  
  <select id="selectManagerLogForAuthSet" parameterType="map" resultType="map">
 <!--  select a.managerNo , c.auth_category_idx, 1 auth_set_kind, a.year, d.k_part_idx k_part, group_no from ${church}.managerLog a
  inner join ${church}.auth_manager c on c.manager_idx=a.managerNo
  inner join ${church}.kGroup d on d.`no`=a.group_no and d.year=#{year}
  where a.year=#{year} -->
  select 
    a.managerNo , c.auth_category_idx, 1 auth_set_kind, a.year, d.k_part_idx k_part, group_no, sortNo, a.readAuth, modifyAuth, delAuth, addAuth, attAuth, secureEtcAuth, individualAuth, familyAuth, attEtcAuth, prayAuth, groupWriteAuth  
    from ${church}.managerLog a
  inner join ${church}.auth_manager c on c.manager_idx=a.managerNo
  inner join ${church}.kGroup d on d.`no`=a.group_no and d.year=#{year}
  where a.year=#{year} and a.state=1
  </select>
  
  <select id="selectAuthSet" parameterType="map" resultType="map">
  select * from ${church}.auth_set where auth_category_idx=#{authCategoryIdx} and year=#{year} and k_part=#{kPart} and group_no=#{groupNo}
  </select>
  
  <insert id="insertAuthSet" parameterType="map">
  	<selectKey resultType="int" keyProperty="authSetIdx" order="AFTER">
        SELECT LAST_INSERT_ID()
    </selectKey> 
  insert into ${church}.auth_set(auth_category_idx, auth_set_kind, year, k_part, group_no, active)
  values(#{authCategoryIdx}, #{authSetKind}, #{year}, #{kPart}, #{groupNo}, #{active})
  on duplicate key update auth_category_idx=#{authCategoryIdx}, year=#{year}, k_part=#{kPart}, group_no=#{groupNo}
  
  </insert>
  
  <insert id="insertAuthGroup" parameterType="map">
  insert into ${church}.auth_group(auth_set_idx, sort_no, auth_type_idx, value)
  values(#{authSetIdx}, #{sortNo}, #{authTypeIdx}, #{value})
  </insert>
</mapper>