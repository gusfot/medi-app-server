<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ohjic.mem.dao.ToolsMapper">

   <!-- 상품정보 삭제 -->
   <delete id="deleteGoodsByChurchCode" parameterType="int">
	delete from goods 
	where type='kyo' and churchCode = #{churchCode}
   </delete>
   
   <!-- 교회정보 삭제 -->
   <delete id="deleteChurchInfoByChurchCode" parameterType="int">
	update churchInfo
	set deleteFlag = 1 
	where churchCode = #{churchCode}
   </delete>
   
   <!-- 교회사용자 삭제 -->
   <delete id="deleteChurchUserByChurchCode" parameterType="int">
	delete from church_user 
	where type='kyo' and church_code = #{churchCode}
   </delete>
   
   <!-- service 삭제 -->
   <delete id="deleteServiceByChurchCode" parameterType="int">
	delete from service 
	where churchCode = #{churchCode}
   </delete>
   
   <!-- product 삭제 -->
   <delete id="deleteProductByChurchCode" parameterType="int">
	delete from product 
	where churchCode = #{churchCode}
   </delete>
   
   <!-- product 삭제 -->
   <update id="dropDatabaseByChurchCode" parameterType="map">
	drop database ${church}
   </update>
   
   
	<!-- 가족관계 재설정 -->
	<!-- fid가 없는 경우 본인을 fid로 설정한다. -->
	<update id="readjustFid" parameterType="map">
	update ${church}.member SET fid = tid, fam_leader = member_name
	where fid = 0
	</update>
	
	<!-- 본인의 fid와 tid가 같은 경우 relation을 신앙세대주로 설정한다. -->
	<update id="readjustFamilyLeaderBySelf" parameterType="map">
	update ${church}.member set relation = '신앙세대주'
	where fid = tid
	</update>
	
	<!-- 성도의 신앙세대주 업데이트 -->
	<update id="readjustFamilyLeaderByAllMember" parameterType="map">
	update ${church}.member as a left join ${church}.member as b on a.fid = b.tid
	set a.fam_leader = ifnull(b.member_name,'')
	</update>

	<!-- 신앙세대주 재설정  -->
	<update id="readjustFamilyLeaderAndRelation" parameterType="map">	
	update ${church}.member as d inner join (select a.tid from ${church}.member AS a left join ${church}.member as b on a.fid = b.tid
	                               where b.tid is null) as c using (tid)
	set d.fid = d.tid, relation = '신앙세대주', fam_leader = member_name
	</update>
	
	<!--  -->
	<update id="readjustPartnerRelation" parameterType="map">	
	update ${church}.member set relation = '배우자'
	where relation in ('배우자', '부부', '남편', '부인', '아내', '처')
	</update>
	
	<!-- 아버지 호칭 '부'로 통일 -->
	<update id="readjustFatherRelation" parameterType="map" >
	update ${church}.member set relation = '부'
	where relation in ('아빠', '아버지', '부친', '부')
	</update>

	<!-- 어머니 호칭 '모'로 통일 -->
	<update id="readjustMotherRelation" parameterType="map" >
	update ${church}.member set relation = '모'
	where relation in ('엄마', '어머니', '모친', '모')
	</update>
 
 	<!-- 신앙세대주의 배우자재설정 -->
	<update id="readjustPartnerRelationOfFamilyLeader" parameterType="map" >
	update ${church}.member as a left join ${church}.member AS b on a.fid = b.fid
	set
	  a.partner_name = b.member_name, a.partner_tid = b.tid,
	  b.partner_name = a.member_name, b.partner_tid = a.tid
	where a.relation in ('배우자', '부인', '부군') and b.relation = '신앙세대주'
	</update>

	<!-- 호칭 재설정 -->
	<update id="readjustAppellation" parameterType="map">
	update ${church}.member as a left join ${church}.member as b on a.fid = b.fid
	set
	  a.partner_name = b.member_name, a.partner_tid = b.tid,
	  b.partner_name = a.member_name, b.partner_tid = a.tid
	where
	  (a.relation = "시부" AND b.relation = "시모") OR
	  (a.relation = "빙부" AND b.relation = "빙모") OR
	  (a.relation = "부친" AND b.relation = "모친") OR
	  (a.relation = "아들1" AND b.relation = "자부1") OR
	  (a.relation = "아들2" AND b.relation = "자부2") OR
	  (a.relation = "아들3" AND b.relation = "자부3") OR
	  (a.relation = "아들4" AND b.relation = "자부4") OR
	  (a.relation = "딸1" AND b.relation = "서랑1") OR
	  (a.relation = "딸2" AND b.relation = "서랑2") OR
	  (a.relation = "딸3" AND b.relation = "서랑3") OR
	  (a.relation = "딸4" AND b.relation = "서랑4") OR
	  (a.relation = "딸1" AND b.relation = "사위1") OR
	  (a.relation = "딸2" AND b.relation = "사위2") OR
	  (a.relation = "딸3" AND b.relation = "사위3") OR
	  (a.relation = "딸4" AND b.relation = "사위4")
	</update>

	<update id="readjustPatner" parameterType="map">
	update ${church}.member a left join ${church}.member b
	      on a.partner_tid = b.tid
	set a.partner_tid = 0, a.partner_name = null
	where a.fid != b.fid
	</update>
	
	<update id="updateUserIdOfPortalUserByUserId" parameterType="map">
	update ohjic.portal_user set user_id = #{newAdminId}
	where user_id = #{oldAdminId}
	</update>
	
	<update id="updateUserIdOfChurchUserByUserId" parameterType="map">
	update ohjic.church_user set user_id = #{newAdminId}
	where user_id = #{oldAdminId}
	</update>
	
	<update id="updateAdminIdOfChurchInfoByAdminId" parameterType="map">
	update ohjic.churchInfo set adminId = #{newAdminId}
	where adminId = #{oldAdminId}
	</update>
	
	<update id="updateUserIdOfServiceByUserId" parameterType="map">
	update ohjic.service set userId = #{newAdminId}
	where userId = #{oldAdminId}
	</update>
	
	<update id="updateUserIdOfProductByUserId" parameterType="map">
	update ohjic.product set userId = #{newAdminId}
	where userId = #{oldAdminId}
	</update>

	<update id="updateUserIdOfKyoBoardByUserId" parameterType="map">
	update ${church}.board set user_id = #{newAdminId}
	where user_id = #{oldAdminId}
	</update>
	
	<update id="updateUserIdOfKyoManagerByUserId" parameterType="map">
	update ${church}.manager set id = #{newAdminId}
	where id = #{oldAdminId}
	</update>
	
	<update id="updateUserIdOfKyoManagerLogByUserId" parameterType="map">
	update ${church}.managerLog set user_id = #{newAdminId}
	where user_id = #{oldAdminId}
	</update>
	
	<update id="updateNowMemberCountOfEdu" parameterType="map">
	update
    ${church}.oh_edu_part a
    left outer join
    (select
       p.edu_part_idx,
       count(distinct tid) as cnt
     from ${church}.oh_edu_part p
       left outer join ${church}.oh_edu_member m
         on p.edu_part_idx = m.edu_part_idx
     group by p.edu_part_idx) b
      on a.edu_part_idx = b.edu_part_idx
	set a.now_member = b.cnt
	where a.now_member != b.cnt
	</update>
	
	   <!-- nameCode의 visitCategory 카운트 조회 -->
   <select id="selectNameCodeOfVisitCategory" parameterType="map" resultType="int">
	select count(*) from ${church}.nameCode where type = 'visitCategory';
   </select>
   
   
   <insert id="insertAuthSmsForChurch" parameterType="map">
	insert into sms_auth_number(member_idx,phone_number_name,phone_number,confirm,active,regi_date,update_date)
	select member_idx,#{churchName},#{churchPhoneNumber},1,0,NOW(),NOW() 
	from portal_user 
	where user_id in 
	<foreach item="userId" index="index" collection="userIdList" open="(" separator="," close=")">
        #{userId}
  </foreach>
   </insert>
   
   <select id="selectEncryptedPassword" parameterType="string" resultType="string">
   select md5(concat('tae',md5(concat(#{plain},'tae'))))
   </select>
   
   <select id="selectChurchCodeList" parameterType="int" resultType="map">
   SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = concat('kyo', #{churchCode})
   </select>
   
   <select id="selectTableColumnList" parameterType="map" resultType="map">
   SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = concat('kyo', #{churchCode}) AND TABLE_NAME = #{tableName}
   </select>
   
   <insert id="insertMemberGuide" parameterType="map">
   INSERT INTO ${church}.member_guide SELECT  tid, -1 as guide_tid, concat(guide, if(guide2 != '', concat(',', guide2), '')) as guide_name, unix_timestamp(now()) as update_date  from ${church}.member where guide != '' or guide2 != ''
   </insert>
   
   <update id="udpateUpdateDateForMemberGuide" parameterType="map">
   update ${church}.member_guide
   set update_date = unix_timestamp(now())
   </update>
   
   <update id="updateDashboardPortletByName" parameterType="map">
    update ${church}.dashboard_portlet
    <set>
      <if test="portletIdx != null">
        portlet_idx = #{portletIdx,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=VARCHAR},
      </if>
      <if test="more != null">
        more = #{more,jdbcType=VARCHAR},
      </if>
      <if test="tabs != null">
        tabs = #{tabs,jdbcType=TEXT},
      </if>
      <if test="customData != null">
        custom_data = #{customData,jdbcType=VARCHAR},
      </if>
      <if test="regiDate != null">
        regi_date = #{regiDate,jdbcType=DATETIME},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=DATETIME},
      </if>
    </set>
    where name = #{name,jdbcType=VARCHAR}
  </update>
  
  <select id="selectChurchList" resultType="map">
SELECT a.*,b.*,c.user_name,c.user_id,c.user_email,c.user_phone,a.regiDate AS regi_date
FROM churchInfo a
LEFT JOIN (select * from product where (churchCode, productNo) in (select churchCode, max(productNo) From product group by churchCode, productNo ) group by churchCode) b ON a.churchCode=b.churchCode AND b.endDate > UNIX_TIMESTAMP() AND b.type="kyo" 
INNER JOIN portal_user AS c ON a.adminId = c.user_id
  </select>
  
  <select id="selectChurchDetailInfo" parameterType="map" resultType="map">
  select 
	sum(if(cDepth1<![CDATA[<]]>0,0,1)) as `교인`
	, sum(if(cDepth1<![CDATA[>=]]>0 and btid is not null, 1,0)) as `분류교인`
	, sum(if(cDepth1<![CDATA[>=]]>0 and btid is null, 1,0)) as `미분류교인`
	, sum(if(cDepth1<![CDATA[<]]>0,1,0)) as `비교인`
	,sum(if(last_view <![CDATA[>]]> unix_timestamp()-60*60*24*30 ,1,0)) as `최근30일수정`
	, sum(if(last_view <![CDATA[>]]> unix_timestamp()-60*60*24*100 ,1,0)) as '최근100일수정'
	, sum(if(TO_DAYS(NOW()) - TO_DAYS(inputDate) <![CDATA[<=]]> 30 , 1, 0)) as '최근30일추가'
	, sum(if(TO_DAYS(NOW()) - TO_DAYS(inputDate) <![CDATA[<=]]> 100 , 1, 0)) as '최근30일추가'
	from
	(select a.*,b.tid as btid from ${church}.member a left join ${church}.kGroupLog b on a.tid = b.tid and b.year=year(now()) and b.end_date > unix_timestamp() group by a.tid ) as c 
 
  </select>
   
  <select id="selectMemberCardView" parameterType="map" resultType="map">
  	select * from ${church}.manager_select_view
  </select>
  
  <update id="updateManagerSelectView" parameterType="map">
  	update ${church}.manager_select_view
  	set view_column = #{view_column}
  	where view_no =#{view_no}
  </update>
  
  <select id="selectManagerById" parameterType="map" resultType="map">
  	select * from ${church}.manager where id= #{managerId}
  </select>
  
  <select id="selectChurchManagerByChurchUseNumber" parameterType="int" resultType="map">
  select a.*, b.version, b.status from ohjic.church_use_number a
  left outer join ohjic.church_upgrade_status b on a.church_code=b.church_code
  where a.kyo_number <![CDATA[>=]]> #{useNumber}
  </select>
  
  <select id="selectSuperAdminByChurchCode" parameterType="map" resultType="map">
  select  b.user_name, b.user_phone from ${church}.manager a 
  inner join ohjic.portal_user b on a.id=b.user_id where grade= 10 limit 1
  </select>
  
  <select id="selectCommonCodeByName" parameterType="map" resultType="map">
  select * from ${church}.common_code where name = #{name};
  </select>
  
  <insert id="insertCommonCode" parameterType="map">
  INSERT INTO ${church}.common_code (`depth1_name`, `depth2_name`, `ord`, `depth`, `name`, `kind`, `level`) 
  VALUES (#{commonCode.depth1_name}, #{commonCode.depth2_name},#{commonCode.ord}, #{commonCode.depth}, #{commonCode.name}, #{commonCode.kind}, #{commonCode.level})
  </insert>
  
  <update id="updateCommonCodeDepth" parameterType="map">
  update ${church}.common_code
  set depth1=idx, ord=(select if(ord is null,1, ord) from (select max(ord)+1 as ord from ${church}.common_code where name!=#{name} and depth=1) a)
  where name=#{name}
  </update>
  
  
  <select id="selectGoods" parameterType="map" resultType="map">
  select * from ohjic.goods where domain = #{domain}
  </select>
  
  <insert id="insertGoods" parameterType="map">
  insert into ohjic.goods(type, domain, churchCode) values(#{type}, #{domain}, #{churchCode})
  </insert>
  
  <select id="selectCgroupByGroupName" parameterType="map" resultType="map">
  select * from ${church}.cGroup where groupName=#{groupName}
  </select>
  
  <insert id="insertSocheon" parameterType="map" >
  insert into ${church}.cGroup(no, ord, depth1, depth2, depth1Name, depth2Name, depth, groupName, display_status)
  select 
	(select min(a.no)-1 from ${church}.cGroup a ) no, 
	100 ord, 
	(select a.no from ${church}.cGroup a where a.groupName='제적') depth1, 
	(select min(a.no)-1 from ${church}.cGroup a ) depth2, 
	'제적' depth1Name, 
	'소천' depth2Name, 
	2 depth, 
	'소천' groupName, 
	0 display_status 
  </insert>
  
    <insert id="insertSocheonDepth1" parameterType="map" >
  insert into ${church}.cGroup(no, ord, depth1, depth2, depth1Name, depth2Name, depth, groupName, display_status)
  select 
	(select min(a.no)-1 from ${church}.cGroup a ) no, 
	100 ord, 
	(select min(a.no)-1 from ${church}.cGroup a ) depth1, 
	0 depth2, 
	'소천' depth1Name, 
	null depth2Name, 
	1 depth, 
	'소천' groupName, 
	0 display_status 
  </insert>
  
  <select id="selectMemberNameHanAndEnCount" parameterType="map" resultType="map">
  <!-- select 'name' name, count(member_name) cnt from ${church}.member where member_name is not null and member_name!=''
	union -->
  select 'han' name, count(member_name_han) cnt, #{church} churchCode from ${church}.member where member_name_han is not null and member_name_han!=''
	union
  select 'en' name, count(member_name_en) cnt, #{church} churchCode from ${church}.member where member_name_en is not null and member_name_en!=''
  </select>
  
  <select id="selecctEndDateForGroupLog" parameterType="map" resultType="map">
  select * from ${church}.kGroupLog where year=#{year} and end_date=1483110000
  </select>
  
  <update id="upateEndDateForKGroupLog" parameterType="map">
  	update ${church}.kGroupLog 
	set end_date=1483196399
	where year=2016 and end_date=1483110000
  </update>
  
  <delete id="deleteChurchUserByDeletedManager" parameterType="org.ohjic.mem.model.Kyo">
  	delete cu from ohjic.church_user cu
	left outer  join ${church}.manager mng on cu.user_id=mng.id
	where cu.type='kyo' and cu.church_code =#{churchCode} and mng.managerNo is null
  </delete>
  
  <update id="updateFimMemberNameByMemberName" parameterType="org.ohjic.mem.model.Kyo">
    update ${church}.member a
	inner join ${church}.finMember b on a.tid=b.tid
	set b.name=a.member_name 
	where a.member_name!=b.name
  </update>
</mapper>